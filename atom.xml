<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[О бложэ мой!]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://rmerkushin.github.io//"/>
  <updated>2015-09-24T08:48:25.000Z</updated>
  <id>http://rmerkushin.github.io//</id>
  
  <author>
    <name><![CDATA[Roman Merkushin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Простой (синхронный) эмулятор REST-сервиса]]></title>
    <link href="http://rmerkushin.github.io/2015/09/24/synchronous-rest-mock-service/"/>
    <id>http://rmerkushin.github.io/2015/09/24/synchronous-rest-mock-service/</id>
    <published>2015-09-24T08:48:00.000Z</published>
    <updated>2015-09-24T08:48:25.000Z</updated>
    <content type="html"><![CDATA[<p>В этой статье я покажу как можно реализовать простой, синхронный эмулятор REST-сервиса с помощью <a href="http://soapui.org/" target="_blank" rel="external">SoapUI</a>. Для реализации REST-заглушки можно использовать множество других инструментов, но если у вас как и у меня уже есть куча эмуляторов SOAP-сервисов на SoapUI, то не вижу смысла плодить зоопарк :) К тому же за счет встроенного groovy, SoapUI позволяет делать достаточно гибкие эмуляторы.</p>
<a id="more"></a>
<h2 id="Создание_проекта">Создание проекта</h2><blockquote>
<p>Для реализации ниже описанного примера использовался SoapUI версии 5.1.3, но пример должен так же работать и в других версиях.</p>
</blockquote>
<p>Запускаем SoapUI и создаем новый REST проект. В появившемся окне ничего не меняем и жмем <code>ОК</code>.<br><img src="/images/new_rest_project.png" alt="" title="New REST project"><br>После того как создастся проект, переименовываем его во что нибудь внятное, например <code>HelloWorld</code>. Далее добавляем MockService, который и будет выступать в качестве нашего эмулятора. Нажимаем ⌘+R в Mac OS или через контекстное меню проекта выбираем пункт <code>New REST MockService</code> и указываем его имя, например “HelloWorldService”. Заходим в настройки созданного MockService и меняем параметр <code>Host</code> на <code>localhost</code> и по желанию меняем порт.</p>
<h2 id="Логирование_запросов\ответов">Логирование запросов\ответов</h2><p>Научим наш эмулятор логированию. Открываем в нашем MockService раздел <code>OnRequest Script</code> и пишем следующий код:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Получаем из запроса тип метода, параметры GET запроса (если они есть), заголовок запроса и его тело</span></span><br><span class="line"><span class="keyword">def</span> method = mockRequest.request.getMethod();</span><br><span class="line"><span class="keyword">def</span> uri = mockRequest.request.getUri();</span><br><span class="line"><span class="keyword">def</span> request = mockRequest.requestHeaders.toString() + <span class="string">"\n"</span> + mockRequest.requestContent.toString();</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Incoming $&#123;method&#125; request: $&#123;uri&#125;\n$&#123;request&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Далее в разделе <code>AfterRequest Script</code> пишем:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Получаем заголовок ответа, тело ответа и имя операции</span></span><br><span class="line"><span class="keyword">def</span> action = mockResult.getMockOperation().getName();</span><br><span class="line"><span class="keyword">def</span> headers = mockResult.getResponseHeaders().toString();</span><br><span class="line"><span class="keyword">def</span> message = mockResult.getResponseContent();</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Outgoing $&#123;action&#125; response:\n$&#123;headers&#125;\n$&#123;message&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="GET">GET</h2><p>Создадим эмуляцию ответа на GET запрос. Через контекстное меню MockService’а выбираем пункт <code>Add new mock action</code>, выбираем тип запроса GET и указываем <code>Resource path</code> - hello, т.к. наш сервис будет приветствовать пользователя по фамилии и имени из запроса.<br><img src="/images/new_rest_mock_action.png" alt="" title="Add new mock action"><br>Далее добавляем в только что созданный action ответ (New MockResponse) и называем его <code>OK</code>. Устанавливаем status code на <code>200 - OK</code>, а content type на <code>application/json</code>. Ниже в Editor пишем следующее:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">greeting</span>": <span class="value"><span class="string">"Hello, $&#123;name&#125; $&#123;surname&#125;!"</span></span>, "<span class="attribute">date</span>": <span class="value"><span class="string">"$&#123;date&#125;"</span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>В разделе <code>Script</code> пишем:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Получаем имя и фамилию из параметров запроса</span></span><br><span class="line"><span class="keyword">def</span> name = mockRequest.request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">def</span> surname = mockRequest.request.getParameter(<span class="string">"surname"</span>);</span><br><span class="line"><span class="comment">// Текущая дата</span></span><br><span class="line"><span class="keyword">def</span> date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Устанавливаем параметры ответа</span></span><br><span class="line">requestContext.name = name;</span><br><span class="line">requestContext.surname = surname;</span><br><span class="line">requestContext.date = date;</span><br></pre></td></tr></table></figure></p>
<p>Все, наш эмулятор готов! Как запускать эмулятор, докрутить к нему https, конфиг и прочее - можно прочитать в других моих статьях.</p>
<p>Скачать готовый пример <a href="https://github.com/rmerkushin/soapui-synchronous-rest-service" target="_blank" rel="external">HelloWorld</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>В этой статье я покажу как можно реализовать простой, синхронный эмулятор REST-сервиса с помощью <a href="http://soapui.org/">SoapUI</a>. Для реализации REST-заглушки можно использовать множество других инструментов, но если у вас как и у меня уже есть куча эмуляторов SOAP-сервисов на SoapUI, то не вижу смысла плодить зоопарк :) К тому же за счет встроенного groovy, SoapUI позволяет делать достаточно гибкие эмуляторы.</p>]]>
    
    </summary>
    
      <category term="groovy" scheme="http://rmerkushin.github.io/tags/groovy/"/>
    
      <category term="mock" scheme="http://rmerkushin.github.io/tags/mock/"/>
    
      <category term="rest" scheme="http://rmerkushin.github.io/tags/rest/"/>
    
      <category term="service" scheme="http://rmerkushin.github.io/tags/service/"/>
    
      <category term="soapui" scheme="http://rmerkushin.github.io/tags/soapui/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Приучаем кота гадить в лоток или настройка SoapUI на Mac OS X]]></title>
    <link href="http://rmerkushin.github.io/2015/06/17/soapui-configuration/"/>
    <id>http://rmerkushin.github.io/2015/06/17/soapui-configuration/</id>
    <published>2015-06-17T12:24:00.000Z</published>
    <updated>2015-08-04T06:49:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/cat_and_toilet.jpeg" alt="" title="Cat"></p>
<a id="more"></a>
<p>После установки сабжа на Mac OS X, можно столкнутся с рядом не очень приятных особенностей. Во-первых, SoapUI так и наровит нагадить своими файлами настроек в корень домашней директории пользователя, что откровенно меня бесит :) Во-вторых, не знаю, только у меня воспроизводится этот баг или нет, но SoapUI наотрез отказывается показывать нормальные, сглаженные шрифты на retina дисплеях.</p>
<p>И так, чтобы SoapUI сохранял свои настройки где то в другом месте, нужно отредактировать файл <code>/Applications/SoapUI-5.*.app/Contents/vmoptions.txt</code> добавив в конец файла следующее:</p>
<blockquote>
<p>-Duser.home=/path_to_soapui_settings_folder</p>
</blockquote>
<p>Для того чтобы вернуть сглаженные шрифты в SoapUI необходимо просто удалить следующий файл <code>/Applications/SoapUI-5.*.app/Contents/Plugins/jre.bundle</code>. Но в этом случае у вас должна уже быть установлена Java.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/cat_and_toilet.jpeg" alt="" title="Cat"></p>]]>
    
    </summary>
    
      <category term="java" scheme="http://rmerkushin.github.io/tags/java/"/>
    
      <category term="mac" scheme="http://rmerkushin.github.io/tags/mac/"/>
    
      <category term="soapui" scheme="http://rmerkushin.github.io/tags/soapui/"/>
    
      <category term="troubleshooting" scheme="http://rmerkushin.github.io/tags/troubleshooting/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Эмуляция защищенного сервиса на SoapUI с SSL]]></title>
    <link href="http://rmerkushin.github.io/2015/06/17/securing-mock-services-with-ssl/"/>
    <id>http://rmerkushin.github.io/2015/06/17/securing-mock-services-with-ssl/</id>
    <published>2015-06-17T12:24:00.000Z</published>
    <updated>2015-08-04T06:49:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/ssl.jpg" alt="" title="SSL"></p>
<a id="more"></a>
<h2 id="Создание_keystore_и_настройка_SoapUI">Создание keystore и настройка SoapUI</h2><p>Для эмуляции защищенного сервиса нам понадобиться сделать keystore c сертификатом. Для этого воспользуемся утилитой из набора JDK - <code>keytool</code>.</p>
<blockquote>
<p>keytool -genkey -alias mock_service_alias -keyalg RSA -keystore keystore_name</p>
</blockquote>
<p><img src="/images/keytool-gen.png" alt="" title="keytool"></p>
<p>Далее нам необходимо настроить SoapUI на созданный keystore. Для этого открываем настройки SoapUI: File-&gt;Preferences и переходим на вкладку SSL Settings. Заполняем поля по аналогии с изображением ниже:<br><img src="/images/ssl-settings.png" alt="" title="keytool"><br>Теперь нажимаем File-&gt;Save Preferences. Находим файл конфигурации soapui-settings.xml (должен быть в домашней директории SoapUI) и кладем его рядом с проектом эмулятора.</p>
<h2 id="Запуск_эмулятора">Запуск эмулятора</h2><p>Для того чтобы эмулятор был доступен по https, нужно указать mockservicerunner.sh путь к файлу конфигурации soapui-settings.xml.</p>
<blockquote>
<p>mockservicerunner.sh -m “MockServiceName” -s path_to_soapui_settings/soapui-settings.xml path_to_project_file</p>
</blockquote>
<p>Теперь эмулятор будет доступен по адресу <code>https://localhost:8443/</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/ssl.jpg" alt="" title="SSL"></p>]]>
    
    </summary>
    
      <category term="https" scheme="http://rmerkushin.github.io/tags/https/"/>
    
      <category term="soapui" scheme="http://rmerkushin.github.io/tags/soapui/"/>
    
      <category term="ssl" scheme="http://rmerkushin.github.io/tags/ssl/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LogParser]]></title>
    <link href="http://rmerkushin.github.io/2015/04/28/logparser/"/>
    <id>http://rmerkushin.github.io/2015/04/28/logparser/</id>
    <published>2015-04-27T19:04:00.000Z</published>
    <updated>2015-08-04T06:49:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/bicycle.jpg" alt="" title="Bicycle"></p>
<p>Вдохновившись утилитой от Microsoft - <a href="https://technet.microsoft.com/ru-ru/scriptcenter/dd919274" target="_blank" rel="external">LogParser</a>, решил написать свою, кросс-платформенную утилиту для парсинга логов с выборкой данных по SQL-запросу с преферансом и куртизанками :)</p>
<a id="more"></a>
<p>На данный момент утилита поддерживает только логи от log4j, но в будущем планируется добавление новых форматов. В утилите реализована полная поддержка SQLite SQL, регулярные выражения в запросах, вывод в plain text и .xlsx и удаленный доступ к логам по sftp.</p>
<p>Подробнее о работе утилиты и ее настойке можно почитать на <a href="https://github.com/rmerkushin/logparser" target="_blank" rel="external">github</a>. Утилита доступна для скачивания в виде бинарных файлов для Mac OS и Windows (сборку под windows особо не проверял, т.к. сборка была из под виртуальной машины).</p>
<p><a href="https://github.com/rmerkushin/logparser/releases/latest" target="_blank" rel="external">Скачать</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/bicycle.jpg" alt="" title="Bicycle"></p>
<p>Вдохновившись утилитой от Microsoft - <a href="https://technet.microsoft.com/ru-ru/scriptcenter/dd919274">LogParser</a>, решил написать свою, кросс-платформенную утилиту для парсинга логов с выборкой данных по SQL-запросу с преферансом и куртизанками :)</p>]]>
    
    </summary>
    
      <category term="logs" scheme="http://rmerkushin.github.io/tags/logs/"/>
    
      <category term="python" scheme="http://rmerkushin.github.io/tags/python/"/>
    
      <category term="sql" scheme="http://rmerkushin.github.io/tags/sql/"/>
    
      <category term="sqlite" scheme="http://rmerkushin.github.io/tags/sqlite/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Использование jQuery на любой web-странице]]></title>
    <link href="http://rmerkushin.github.io/2015/04/23/jquery-injection/"/>
    <id>http://rmerkushin.github.io/2015/04/23/jquery-injection/</id>
    <published>2015-04-23T17:12:00.000Z</published>
    <updated>2015-08-04T06:49:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/logo-jquery.jpg" alt="" title="jQuery injection"><br>Простой пример jQuery injection для любой web-страницы.</p>
<a id="more"></a>
<p>Пример написан с использованием Python и Selenium, но аналогичное решение можно применить как руками из консоли разработчика, так и при помощи других ЯП для которых есть Selenium библиотеки (Java, C#, Ruby, PHP и etc.).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://example.org/"</span>)</span><br><span class="line">driver.execute_script(</span><br><span class="line">    <span class="string">'var elem = document.createElement("script");'</span></span><br><span class="line">    <span class="string">'elem.src = "//code.jquery.com/jquery-2.1.3.min.js";'</span></span><br><span class="line">    <span class="string">'elem.type="text/javascript";'</span></span><br><span class="line">    <span class="string">'document.getElementsByTagName("head")[0].appendChild(elem);'</span>)</span><br><span class="line">header_text = driver.execute_script(<span class="string">'return $("h1").text()'</span>)</span><br><span class="line">driver.close()</span><br><span class="line"><span class="keyword">assert</span> <span class="string">"Example Domain"</span> <span class="keyword">in</span> header_text</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/logo-jquery.jpg" alt="" title="jQuery injection"><br>Простой пример jQuery injection для любой web-страницы.</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://rmerkushin.github.io/tags/javascript/"/>
    
      <category term="jquery" scheme="http://rmerkushin.github.io/tags/jquery/"/>
    
      <category term="python" scheme="http://rmerkushin.github.io/tags/python/"/>
    
      <category term="webdriver" scheme="http://rmerkushin.github.io/tags/webdriver/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Простой (синхронный) эмулятор SOAP-сервиса]]></title>
    <link href="http://rmerkushin.github.io/2015/04/17/synchronous-mock-service/"/>
    <id>http://rmerkushin.github.io/2015/04/17/synchronous-mock-service/</id>
    <published>2015-04-17T09:53:00.000Z</published>
    <updated>2015-08-04T06:49:51.000Z</updated>
    <content type="html"><![CDATA[<p>В этой статье я покажу как можно реализовать простой, синхронный эмулятор SOAP-сервиса с помощью <a href="http://soapui.org/" target="_blank" rel="external">SoapUI</a>. Для реализации эмулятора я использовал пример WSDL с сайта <a href="http://www.tutorialspoint.com/wsdl/wsdl_example.htm" target="_blank" rel="external">tutorialspoint</a>. Эмулятор будет поддерживать разные варианты ответов, логировать запросы и ответы, а так же настраиваться при помощи конфигурационного файла. Let’s rock!</p>
<a id="more"></a>
<h2 id="Создание_проекта">Создание проекта</h2><blockquote>
<p>Для реализации ниже описанного примера использовался SoapUI версии 5, но пример должен так же работать и в версии 4х.</p>
</blockquote>
<p>После запуска SoapUI жмем ⌘+N в Mac OS или Ctrl+N в Windows\Linux, либо через меню <code>File-&gt;New SOAP project</code> создаем новый SOAP проект. Вводим <code>Project Name</code>, у нас это будет “HelloWorld” и выбираем нужную WSDL (вместо файла можно указать ссылку на уже готовый сервис). Выбираем пункт <code>Create Requests</code> если он не отмечен, это позволит автоматически создать примеры запросов по указанной WSDL для тестирования и отладки эмулятора.<br><img src="/images/new_soap_project.png" alt="" title="New SOAP project"><br>После того как создастся проект, необходимо будет добавить MockService, который и будет выступать в качестве нашего эмулятора. Нажимаем ⌘+O в Mac OS или через контекстное меню проекта выбираем пункт <code>New SOAP MockService</code> и указываем его имя, например “HelloWorldService”.</p>
<blockquote>
<p>В SoapUI версии 4х это можно сделать автоматически при создании проекта выбрав соответствующий пункт.</p>
</blockquote>
<p>Теперь нам нужно добавить операции которые будет поддерживать эмулятор. Для этого выбираем наш только что созданный MockService и жмем ⌘+N в Mac OS или Ctrl+N в Windows\Linux, либо через контекстное меню выбираем пункт <code>New MockOperation</code>. В открывшемся окне выбираем нужную нам операцию. В этом примере WSDL всего одна операция, по этому просто жмем <code>OK</code> (в других случаях этот шаг нужно будет повторять столько раз, сколько нужно эмулировать операций). Если в дереве проекта открыть <code>Response 1</code> то можно увидеть сгенерированный SOAP ответ по указанной при создании проекта WSDL.<br><img src="/images/operation_response.png" alt="" title="Operation response"><br>И так, основа нашего эмулятора уже готова, и если его запустить, то он будет вполне честно работать и отвечать всегда одним и тем же сообщением. Но это слишком скучно, по этому давайте немного “прокачаем” наш эмулятор.</p>
<h2 id="Динамический_ответ">Динамический ответ</h2><p>Мы будем получать имя из присланного запроса и отвечать приветствием с использованием этого имени. Для этого нам потребуется написать небольшой скрипт на <a href="http://www.soapui.org/apidocs/index.html" target="_blank" rel="external">groovy</a>. SoapUI позволяет использовать groovy скрипты на разных уровнях mock’а, таких как сам MockService (при старте сервиса, при его остановке, при получении запроса и после запроса), MockOperation и MockResponse. Нас интересует уровень MockResponse. Для начала дадим нашему ответу какое-нибудь логичное название, например “successful”, поскольку наш ответ будет эмулировать удачную обработку запроса. Теперь открываем наш ответ, и в элемент <code>greeting</code> вписываем  переменную <code>${greeting}</code> которая будет заменяться на нужный текст при выполнении скрипта.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">soapenv:Envelope</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">                  <span class="attribute">xmlns:xsd</span>=<span class="value">"http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line">                  <span class="attribute">xmlns:soapenv</span>=<span class="value">"http://schemas.xmlsoap.org/soap/envelope/"</span></span><br><span class="line">                  <span class="attribute">xmlns:urn</span>=<span class="value">"urn:examples:helloservice"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">soapenv:Header</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">soapenv:Body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">urn:sayHelloResponse</span> <span class="attribute">soapenv:encodingStyle</span>=<span class="value">"http://schemas.xmlsoap.org/soap/encoding/"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">greeting</span> <span class="attribute">xsi:type</span>=<span class="value">"xsd:string"</span>&gt;</span>$&#123;greeting&#125;<span class="tag">&lt;/<span class="title">greeting</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">urn:sayHelloResponse</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Теперь, в этом же окне открываем вкладку <code>Script</code> и вписываем туда следующий код:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eviware.soapui.support.GroovyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Создаем экземпляр класса GroovyUtils</span></span><br><span class="line"><span class="keyword">def</span> groovyUtils = <span class="keyword">new</span> GroovyUtils(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Получаем значение элемента firstName из входящего запроса по xpath</span></span><br><span class="line"><span class="keyword">def</span> requestHolder = groovyUtils.getXmlHolder(mockRequest.requestContent);</span><br><span class="line"><span class="keyword">def</span> firstName = requestHolder.getNodeValue(<span class="string">"//firstName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Устанавливаем значение переменной greeting</span></span><br><span class="line"><span class="keyword">def</span> greeting = <span class="string">"Привет, $&#123;firstName&#125;!"</span>;</span><br><span class="line">requestContext.greeting = greeting;</span><br></pre></td></tr></table></figure></p>
<p>И вуаля! Теперь наш эмулятор будет приветствовать нас по имени отправляемом в запросе. Чтобы убедиться в том, что эмулятор работает, откроем в дереве проекта элемент <code>HelloWorldService</code>. Перед тем как запустить эмулятор, нам нужно его настроить. Нажимаем на иконку в виде перекрещенных отвертки и гаечного ключа. Изменяем значение параметра <code>Host</code> на localhost и если у вас занят порт 8080, то и его тоже. Закрываем окно настроек эмулятора и жмем на иконку в виде зеленой стрелки.<br><img src="/images/hello_world_service.png" alt="" title="HelloWorldService"><br>Теперь открываем в дереве проекта элемент <code>Request 1</code> для операции <code>sayHello</code>, изменяем значение элемента <code>firstName</code> на свое имя, меняем в адресной строке URL на <a href="">http://localhost:8080/</a> и жмем иконку в виде зеленой стрелки. В правой части окна должен появится ответ с приветствием.<br><img src="/images/first_response.png" alt="" title="Response"><br>Если вы не видите сообщения с приветствием, значит вы где-то ошиблись.</p>
<h2 id="Логирование_входящих_и_исходящих_сообщений">Логирование входящих и исходящих сообщений</h2><p>Чтобы проверить что приходило в наш эмулятор и что отправлялось в ответ, мы прикрутим к нашему эмулятору логер сообщений, который будет сохранять действия нашего эмулятора в файл лога SoapUI - <code>global-groovy.log</code>, а так же сохранять запросы в виде xml файлов. В дереве проекта открываем MockOperation - <code>sayHello</code>, из выпадающего списка <code>Dispatch</code> выбираем пункт <code>SCRIPT</code>. В появившемся текстовом поле ниже вписываем следующий код:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.eviware.soapui.support.GroovyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Создаем экземпляр класса GroovyUtils</span></span><br><span class="line"><span class="keyword">def</span> groovyUtils = <span class="keyword">new</span> GroovyUtils(context);</span><br><span class="line"><span class="comment">// Получаем путь до директории с проектом</span></span><br><span class="line"><span class="keyword">def</span> projectDir = groovyUtils.projectPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Получаем запрос и значение элемента firstName из входящего запроса по xpath</span></span><br><span class="line"><span class="keyword">def</span> requestHolder = groovyUtils.getXmlHolder(mockRequest.requestContent);</span><br><span class="line"><span class="keyword">def</span> requestMessage = requestHolder.getPrettyXml();</span><br><span class="line"><span class="keyword">def</span> firstName = requestHolder.getNodeValue(<span class="string">"//firstName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем запрос в директорию requests рядом с нашим проектом (директория должна существовать!)</span></span><br><span class="line"><span class="keyword">def</span> request = <span class="keyword">new</span> File(projectDir, <span class="string">"/requests/sayHello_$&#123;firstName&#125;.xml"</span>);</span><br><span class="line">request.write(requestMessage, <span class="string">'UTF-8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем запрос в лог global-groovy.log</span></span><br><span class="line">log.info(<span class="string">"Received sayHello request: \n$&#123;requestMessage&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Так же добавляем в конец скрипта для ответа “successful” следующий код:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Сохраняем ответ в лог global-groovy.log</span></span><br><span class="line"><span class="keyword">def</span> message = mockResponse.responseContent.replace(<span class="string">'$&#123;greeting&#125;'</span>, greeting);</span><br><span class="line">log.info(<span class="string">"Sended sayHello response: \n$&#123;message&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Теперь если запустить эмулятор и отправлять в него запросы, то можно увидеть что все пришедшие запросы сохраняются в директории requests, а так же их можно увидеть в логе SoapUI. Для того чтобы посмотреть лог SoapUI, нужно открыть вкладку <code>script log</code> на нижней панели главного окна SoapUI.</p>
<h2 id="Конфигурирование_эмулятора">Конфигурирование эмулятора</h2><p>Для конфигурирования эмулятора мы будем использовать старый добрый INI(conf) формат, т.к. он лучше дружит с кириллицей чем формат JAVA properties, а так же хорошо поддерживается другими ЯП на случай автоматической конфигурации эмулятора. Так же я покажу как подключать сторонние JAVA-библиотеки к SoapUI. Для работы с INI форматом я буду использовать <a href="http://ini4j.sourceforge.net/" target="_blank" rel="external">ini4j</a> библиотеку. Чтобы подключить JAVA-библиотеку к SoapUI ее необходимо положить в директорию <code>../SoapUI/bin/ext/</code>. Теперь создадим наш конфигурационный файл, settings.conf:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[Response]</span></span><br><span class="line"><span class="comment">; Возможные варианты: successful, custom, fault</span></span><br><span class="line"><span class="setting">type = <span class="value">successful</span></span></span><br><span class="line"><span class="setting">timeout = <span class="value"><span class="number">0</span></span></span></span><br><span class="line"><span class="setting">greeting = <span class="value">Hey</span></span></span><br><span class="line"><span class="setting">custom = <span class="value">example</span></span></span><br></pre></td></tr></table></figure></p>
<p>И так, у нашего эмулятора будет конфигурироваться вариант ответа, таймаут перед ответом на запрос и текст приветствия. Создадим новый вариант ответа, fault. В дереве проекта выбираем MockOperation <code>sayHello</code> и жмем ⌘+N в Mac OS или Ctrl+N в Windows\Linux, либо через контекстное меню выбираем пункт <code>New MockResponse</code>. Вводим имя нового варианта ответа - “fault”. Далее открываем его и жмем на иконку в виде квадрата с восклицательным знаком внутри и подтверждаем создание fault сообщения и заполняем его например так:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">soapenv:Envelope</span> <span class="attribute">xmlns:soapenv</span>=<span class="value">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">soapenv:Body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">soapenv:Fault</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">faultcode</span>&gt;</span>SOAP-ENV:Client<span class="tag">&lt;/<span class="title">faultcode</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">faultstring</span> <span class="attribute">xml:lang</span>=<span class="value">"EN"</span>&gt;</span>There was an error in the incoming SOAP request packet:  Client, InvalidXml<span class="tag">&lt;/<span class="title">faultstring</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="title">faultactor</span>&gt;</span>http://example.org/HelloWorldService<span class="tag">&lt;/<span class="title">faultactor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">soapenv:Fault</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Теперь открываем наш скрипт для MockOperation - <code>sayHello</code> и приводим к такому виду:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.ini4j.Ini;</span><br><span class="line"><span class="keyword">import</span> com.eviware.soapui.support.GroovyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Создаем экземпляр класса GroovyUtils</span></span><br><span class="line"><span class="keyword">def</span> groovyUtils = <span class="keyword">new</span> GroovyUtils(context);</span><br><span class="line"><span class="comment">// Получаем путь до директории с проектом</span></span><br><span class="line"><span class="keyword">def</span> projectDir = groovyUtils.projectPath;</span><br><span class="line"><span class="comment">// Загружаем конфигурационный файл</span></span><br><span class="line"><span class="keyword">def</span> conf = <span class="keyword">new</span> Ini(<span class="keyword">new</span> File(projectDir, <span class="string">"/settings.conf"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Получаем сообщение и значение элемента firstName из входящего запроса по xpath</span></span><br><span class="line"><span class="keyword">def</span> requestHolder = groovyUtils.getXmlHolder(mockRequest.requestContent);</span><br><span class="line"><span class="keyword">def</span> requestMessage = requestHolder.getPrettyXml();</span><br><span class="line"><span class="keyword">def</span> firstName = requestHolder.getNodeValue(<span class="string">"//firstName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем запрос в директорию requests рядом с нашим проектом (директория должна существовать!)</span></span><br><span class="line"><span class="keyword">def</span> request = <span class="keyword">new</span> File(projectDir, <span class="string">"/requests/sayHello_$&#123;firstName&#125;.xml"</span>);</span><br><span class="line">request.write(requestMessage, <span class="string">'UTF-8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем запрос в лог global-groovy.log</span></span><br><span class="line">log.info(<span class="string">"Received sayHello request: \n$&#123;requestMessage&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Задержка перед ответом</span></span><br><span class="line"><span class="keyword">def</span> timeout = conf.get(<span class="string">"Response"</span>, <span class="string">"timeout"</span>);</span><br><span class="line">Thread.sleep(Integer.valueOf(timeout) * <span class="number">1000</span>);</span><br><span class="line">log.info(<span class="string">"Wait $&#123;timeout&#125; second(s) before sending response"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Выбираем вариант ответа</span></span><br><span class="line"><span class="keyword">def</span> response = conf.get(<span class="string">"Response"</span>, <span class="string">"type"</span>);</span><br><span class="line"><span class="keyword">return</span> response;</span><br></pre></td></tr></table></figure></p>
<p>Так же изменим скрипт для ответа “successful”:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.ini4j.Ini;</span><br><span class="line"><span class="keyword">import</span> com.eviware.soapui.support.GroovyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Создаем экземпляр класса GroovyUtils</span></span><br><span class="line"><span class="keyword">def</span> groovyUtils = <span class="keyword">new</span> GroovyUtils(context);</span><br><span class="line"><span class="comment">// Получаем путь до директории с проектом</span></span><br><span class="line"><span class="keyword">def</span> projectDir = groovyUtils.projectPath;</span><br><span class="line"><span class="comment">// Загружаем конфигурационный файл</span></span><br><span class="line"><span class="keyword">def</span> conf = <span class="keyword">new</span> Ini(<span class="keyword">new</span> File(projectDir, <span class="string">"/settings.conf"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Получаем значение элемента firstName из входящего запроса по xpath</span></span><br><span class="line"><span class="keyword">def</span> requestHolder = groovyUtils.getXmlHolder(mockRequest.requestContent);</span><br><span class="line"><span class="keyword">def</span> firstName = requestHolder.getNodeValue(<span class="string">"//firstName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Устанавливаем значение переменной greeting</span></span><br><span class="line"><span class="keyword">def</span> helloText = conf.get(<span class="string">"Response"</span>, <span class="string">"greeting"</span>);</span><br><span class="line"><span class="keyword">def</span> greeting = <span class="string">"$&#123;helloText&#125;, $&#123;firstName&#125;!"</span>;</span><br><span class="line">requestContext.greeting = greeting;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем ответ в лог global-groovy.log</span></span><br><span class="line"><span class="keyword">def</span> message = mockResponse.responseContent.replace(<span class="string">'$&#123;greeting&#125;'</span>, greeting);</span><br><span class="line">log.info(<span class="string">"Sended sayHello response: \n$&#123;message&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="Custom’ный_ответ">Custom’ный ответ</h2><p>Добавим к нашему эмулятору возможность загружать ответ из заранее подготовленного xml файла. Добавим новый MockResponse по аналогии с fault ответом и назовем его “custom”. Далее заменим тело сообщения на переменную <code>${message}</code> и добавим следующий скрипт:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.ini4j.Ini;</span><br><span class="line"><span class="keyword">import</span> com.eviware.soapui.support.GroovyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Создаем экземпляр класса GroovyUtils</span></span><br><span class="line"><span class="keyword">def</span> groovyUtils = <span class="keyword">new</span> GroovyUtils(context);</span><br><span class="line"><span class="comment">// Получаем путь до директории с проектом</span></span><br><span class="line"><span class="keyword">def</span> projectDir = groovyUtils.projectPath;</span><br><span class="line"><span class="comment">// Загружаем конфигурационный файл</span></span><br><span class="line"><span class="keyword">def</span> conf = <span class="keyword">new</span> Ini(<span class="keyword">new</span> File(projectDir, <span class="string">"/settings.conf"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Загружаем ответ из файла</span></span><br><span class="line"><span class="keyword">def</span> responseFile = conf.get(<span class="string">"Response"</span>, <span class="string">"custom"</span>);</span><br><span class="line"><span class="keyword">def</span> xmlString = <span class="keyword">new</span> File(projectDir, <span class="string">"/responses/$&#123;responseFile&#125;.xml"</span>).getText(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">def</span> responseHolder = groovyUtils.getXmlHolder(xmlString);</span><br><span class="line"><span class="keyword">def</span> message = responseHolder.getPrettyXml();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Устанавливаем значение переменной message</span></span><br><span class="line">requestContext.message = message;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Сохраняем ответ в лог global-groovy.log</span></span><br><span class="line">log.info(<span class="string">"Sended sayHello response: \n$&#123;message&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Все, наш эмулятор готов!</p>
<h2 id="Скрипт_для_запуска_эмулятора">Скрипт для запуска эмулятора</h2><p>Чтобы не держать эмулятор у себя на компьютере и не запускать SoapUI каждый раз, напишем небольшой скрипт для headless запуска и выключения эмулятора для Linux.<br>Start service:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DIR=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>) &amp;&amp; <span class="built_in">pwd</span>)</span><br><span class="line">SERVICE_RUNNER=/&lt;path_to_soapui&gt;/bin/mockservicerunner.sh</span><br><span class="line">PROJECT_FILE=/&lt;path_to_project_file&gt;/HelloWorld.xml</span><br><span class="line">PORT=&lt;PORT&gt;</span><br><span class="line">LOCAL_PATH=/HelloWorldService</span><br><span class="line"></span><br><span class="line">OUTPUT=<span class="variable">$DIR</span>/soapui.log</span><br><span class="line">ERROR=<span class="variable">$DIR</span>/soapui-errors.log</span><br><span class="line">PIDFILE=<span class="variable">$DIR</span>/service.pid</span><br><span class="line"></span><br><span class="line"><span class="variable">$SERVICE_RUNNER</span> -m <span class="string">"HelloWorldService"</span> -p <span class="variable">$PORT</span> <span class="operator">-a</span> <span class="variable">$LOCAL_PATH</span> <span class="variable">$PROJECT_FILE</span> &gt;&gt; <span class="variable">$OUTPUT</span> <span class="number">2</span>&gt;&gt; <span class="variable">$ERROR</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $! &gt; <span class="variable">$PIDFILE</span></span><br></pre></td></tr></table></figure></p>
<p>Stop service:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DIR=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>) &amp;&amp; <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">cat <span class="variable">$DIR</span>/service.pid | xargs <span class="built_in">kill</span> -<span class="number">9</span></span><br><span class="line"><span class="built_in">kill</span> -<span class="number">9</span> `ps aux | grep HelloWorld | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line">cat /dev/null &gt; <span class="variable">$DIR</span>/soapui-errors.log</span><br><span class="line">cat /dev/null &gt; <span class="variable">$DIR</span>/soapui.log</span><br><span class="line">cat /dev/null &gt; <span class="variable">$DIR</span>/global-groovy.log</span><br><span class="line"></span><br><span class="line">rm <span class="operator">-f</span> <span class="variable">$DIR</span>/service.pid</span><br></pre></td></tr></table></figure></p>
<p>После запуска, эмултор будет доступен по URL: <code>http://&lt;ip_or_host_name&gt;:&lt;PORT&gt;/&lt;LOCAL_PATH&gt;</code></p>
<p>Скачать готовый пример <a href="https://github.com/rmerkushin/soapui-synchronous-service" target="_blank" rel="external">HelloWorld</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>В этой статье я покажу как можно реализовать простой, синхронный эмулятор SOAP-сервиса с помощью <a href="http://soapui.org/">SoapUI</a>. Для реализации эмулятора я использовал пример WSDL с сайта <a href="http://www.tutorialspoint.com/wsdl/wsdl_example.htm">tutorialspoint</a>. Эмулятор будет поддерживать разные варианты ответов, логировать запросы и ответы, а так же настраиваться при помощи конфигурационного файла. Let’s rock!</p>]]>
    
    </summary>
    
      <category term="groovy" scheme="http://rmerkushin.github.io/tags/groovy/"/>
    
      <category term="mock" scheme="http://rmerkushin.github.io/tags/mock/"/>
    
      <category term="service" scheme="http://rmerkushin.github.io/tags/service/"/>
    
      <category term="soap" scheme="http://rmerkushin.github.io/tags/soap/"/>
    
      <category term="soapui" scheme="http://rmerkushin.github.io/tags/soapui/"/>
    
      <category term="automation testing" scheme="http://rmerkushin.github.io/categories/automation-testing/"/>
    
  </entry>
  
</feed>